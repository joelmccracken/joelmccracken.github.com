<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joel&#39;s Journal</title>
    <description>My personal place to write about the things I find interesting. Programming, Lisp, Ruby, Emacs, etc.</description>
    <link>http://joelmccracken.github.io</link>
    <atom:link href="http://joelmccracken.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>A Simple Web App in Rust, Part 1</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. Intro &amp;amp; Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;2. The App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;3. The Plan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4. Writing The &quot;Hello World&quot; Web App&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4-1&quot;&gt;4.1. Installing Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4-2&quot;&gt;4.2. Setting Up the Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4-3&quot;&gt;4.3. The &quot;Hello World&quot; Example Running&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4-4&quot;&gt;4.4. One Final Challenge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Intro &amp;amp; Background&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
What is it like to write a tiny web app in Rust from
the perspective of an experienced programmer who is new to the ecosystem?
Read on to find out.
&lt;/p&gt;

&lt;p&gt;
I&#39;ve been interested in Rust since I first heard about it. A systems
language that supports macros &amp;amp; has room to grow towards higher-level
abstractions? Awesome.
&lt;/p&gt;

&lt;p&gt;
So far, I have only written read blog posts about Rust &amp;amp; done some
very basic &quot;hello world&quot; style programs. So, I guess I&#39;m saying that
my perspective is pretty raw.
&lt;/p&gt;

&lt;p&gt;
A while back I saw &lt;a href=&quot;http://artyom.me/learning-racket-1&quot;&gt;this article&lt;/a&gt; about learning Racket, and I thought
it was really great. We need more people writing about their
experiences as beginners with a technology, especially those who
already have a fair amount of experience with
technology &lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I also liked its stream-of-consciousness
approach, and think it would be a nice experiment to write one for
Rust.
&lt;/p&gt;

&lt;p&gt;
So, with the preliminaries out of the way, let&#39;s get started.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; The App&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
The app I want to build serves a simple need of mine: A
brain-dead-easy way to record when I take my medication each day. I
want tap a link on my home screen and have it record the visit, and
this will preserve a record of when I&#39;ve taken my medication.
&lt;/p&gt;

&lt;p&gt;
Rust seems to be suited for this app. It&#39;s fast. Running a single,
simple server takes relatively
few resources, so it won&#39;t be taxing to my VPS. And, I have wanted to
do something more real with Rust.
&lt;/p&gt;

&lt;p&gt;
The MVP is very small, but there room for it to grow if I want to add
more features. Sounds perfect.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; The Plan&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
So, I&#39;m going to quickly admit something here: I lost an earlier
version of this project. This has some disadvantages: as I recreate
this, I won&#39;t have the same level of unfamiliarity I did when I
approached it some weeks ago. However, I think I remember those pain
points, and will do my best to recreate them.
&lt;/p&gt;

&lt;p&gt;
However, there is one thing that I learned that I want to apply here:
it is much easier to build separate, individual programs while
exploring APIs instead of trying to do everything all at once.
&lt;/p&gt;

&lt;p&gt;
To that end, I have the following plan:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Build a simple web server that displays &quot;hello world&quot; when I
visit.
&lt;/li&gt;
&lt;li&gt;Build a tiny program that logs the formatted date and time whenever
it is run.
&lt;/li&gt;
&lt;li&gt;Integrate the two into a single application.
&lt;/li&gt;
&lt;li&gt;Deploy this application to my server, a Digital Ocean VPS.
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; Writing The &quot;Hello World&quot; Web App&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
So, I&#39;m starting an empty git repo &amp;amp; have homebrew installed. Lets
install Rust. I know this much, at least.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.1&lt;/span&gt; Installing Rust&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
$ brew update
...
$ brew install rust
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/rust-1.0.0.yosemite.bottle.tar.gz
############################################################################################# 100.0%
==&amp;gt; Pouring rust-1.0.0.yosemite.bottle.tar.gz
==&amp;gt; Caveats
Bash completion has been installed to:
  /usr/local/etc/bash_completion.d

zsh completion has been installed to:
  /usr/local/share/zsh/site-functions
==&amp;gt; Summary
   /usr/local/Cellar/rust/1.0.0: 13947 files, 353M
&lt;/pre&gt;


&lt;p&gt;
Oook, before anything else, lets do a regular &quot;hello world&quot; program.
&lt;/p&gt;


&lt;pre class=&quot;example&quot;&gt;
$ cat &amp;gt; hello_world.rs
fn main() {

        println!(&quot;hello world&quot;);
}
^D
$ rustc hello_world.rs
$ ./hello_world
hello world
$
&lt;/pre&gt;

&lt;p&gt;
So far, so good. Rust is working! Or, at least, the compiler is.
&lt;/p&gt;

&lt;p&gt;
A friend suggested I try &lt;a href=&quot;http://nickel.rs/&quot;&gt;nickle.rs&lt;/a&gt; as a web application framework for
Rust. It looks good to me!
&lt;/p&gt;

&lt;p&gt;
As of today, the first example it uses is:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
#[macro_use] extern crate nickel;

use nickel::Nickel;

fn main() {
    let mut server = Nickel::new();

    server.utilize(router! {
        get &quot;**&quot; =&amp;gt; |_req, _res| {
            &quot;Hello world!&quot;
        }
    });

    server.listen(&quot;127.0.0.1:6767&quot;);
}
&lt;/pre&gt;

&lt;p&gt;
So, the first time I did this, I got a little side tracked and learned
a bit about cargo. This time, I notice that there&#39;s this
&lt;a href=&quot;http://nickel.rs/getting-started.html&quot;&gt;&quot;getting started&quot; link&lt;/a&gt;, so I think I&#39;ll try that instead of getting
everything set up on my own.
&lt;/p&gt;

&lt;p&gt;
There&#39;s a script that I&#39;m supposed to &lt;code&gt;curl&lt;/code&gt; and pipe into a root
shell, but that makes me paranoid so I&#39;m going to download it and look
over it first.
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
curl -LO https://static.rust-lang.org/rustup.sh
&lt;/pre&gt;


&lt;p&gt;
Ok, this actually doesn&#39;t look like its going to do what I want. At
least, there&#39;s a lot going on in this script, more than I want to deal
with right now. Hmm. I &lt;i&gt;wonder&lt;/i&gt; if &lt;code&gt;cargo&lt;/code&gt; got installed with &lt;code&gt;rustc&lt;/code&gt;?
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
$ which cargo
/usr/local/bin/cargo
$ cargo -v
Rust&#39;s package manager

Usage:
    cargo &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;...]
    cargo [options]

Options:
    -h, --help       Display this message
    -V, --version    Print version info and exit
    --list           List installed commands
    -v, --verbose    Use verbose output

Some common cargo commands are:
    build       Compile the current project
    clean       Remove the target directory
    doc         Build this project&#39;s and its dependencies&#39; documentation
    new         Create a new cargo project
    run         Build and execute src/main.rs
    test        Run the tests
    bench       Run the benchmarks
    update      Update dependencies listed in Cargo.lock
    search      Search registry for crates

See &#39;cargo help &amp;lt;command&amp;gt;&#39; for more information on a specific command.
&lt;/pre&gt;

&lt;p&gt;
Ok, that looks good I guess? I&#39;ll go with it for now.
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
$ rm rustup.sh
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.2&lt;/span&gt; Setting Up the Project&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-2&quot;&gt;
&lt;p&gt;
So, the next step is to generate a new project directory. But I
already have a project directory =(. I&#39;ll try it like this, anyway.
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
$ cargo new . --bin
Destination `/Users/joel/Projects/simplelog/.` already exists
&lt;/pre&gt;

&lt;p&gt;
Ugh, that didn&#39;t work.
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
$ cargo -h
Create a new cargo package at &amp;lt;path&amp;gt;

Usage:
    cargo new [options] &amp;lt;path&amp;gt;
    cargo new -h | --help

Options:
    -h, --help          Print this message
    --vcs &amp;lt;vcs&amp;gt;         Initialize a new repository for the given version
                        control system (git or hg) or do not initialize any version
                        control at all (none) overriding a global configuration.
    --bin               Use a binary instead of a library template
    --name &amp;lt;name&amp;gt;       Set the resulting package name
    -v, --verbose       Use verbose output
&lt;/pre&gt;

&lt;p&gt;
Yeah, it doesn&#39;t look like this is going to do what I want it to. Blah
I guess I&#39;ll just redo this repo.
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
$ cd ../
$ rm -rf simplelog/
$ cargo new simple-log --bin
$ cd simple-log/
&lt;/pre&gt;


&lt;p&gt;
Ok, what&#39;s up in here?
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
$ tree
.
|____.git
| |____config
| |____description
| |____HEAD
| |____hooks
| | |____README.sample
| |____info
| | |____exclude
| |____objects
| | |____info
| | |____pack
| |____refs
| | |____heads
| | |____tags
|____.gitignore
|____Cargo.toml
|____src
| |____main.rs
&lt;/pre&gt;

&lt;p&gt;
So, it made a git repository, &lt;code&gt;Cargo.toml&lt;/code&gt; and a &lt;code&gt;main.rs&lt;/code&gt; in a &lt;code&gt;src&lt;/code&gt;
directory. Sounds fine to me.
&lt;/p&gt;

&lt;p&gt;
Next on the nickel getting started page,
I add the &lt;code&gt;nickel.rs&lt;/code&gt; dependency to the cargo file, and it now looks
like:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
[package]
name = &quot;simple-log&quot;
version = &quot;0.1.0&quot;
authors = [&quot;Joel McCracken &amp;lt;mccracken.joel@gmail.com&amp;gt;&quot;]

[dependencies.nickel]

git = &quot;https://github.com/nickel-org/nickel.rs.git&quot;
&lt;/pre&gt;

&lt;p&gt;
This makes sense, I think. I&#39;m not sure what
&quot;dependencies.nickel&quot; is actually &lt;i&gt;saying&lt;/i&gt;. Is &lt;code&gt;dependencies&lt;/code&gt; a hash
with a &lt;code&gt;nickel&lt;/code&gt; key? I do get that I&#39;m saying &quot;get nickel from here,
yo&quot;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.3&lt;/span&gt; The &quot;Hello World&quot; Example Running&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-3&quot;&gt;
&lt;p&gt;
Anyway, moving on and pasting the example into &lt;code&gt;main.rs&lt;/code&gt;:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
#[macro_use] extern crate nickel;

use nickel::Nickel;

fn main() {
    let mut server = Nickel::new();

    server.utilize(router! {
        get &quot;**&quot; =&amp;gt; |_req, _res| {
            &quot;Hello world!&quot;
        }
    });

    server.listen(&quot;127.0.0.1:6767&quot;);
}
&lt;/pre&gt;

&lt;p&gt;
So, what&#39;s the deal with &lt;code&gt;macro_use&lt;/code&gt;, &lt;code&gt;extern&lt;/code&gt;, and then needing to
&lt;code&gt;use&lt;/code&gt;? All stuff I will figure out later.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Oh snap&lt;/i&gt;, I had a few sentences about how &lt;code&gt;macro_use&lt;/code&gt; was probably a
macro-time directive&lt;sup&gt;&lt;a id=&quot;fnr.2&quot; name=&quot;fnr.2&quot; class=&quot;footref&quot; href=&quot;#fn.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, but I didn&#39;t see any actual
macros, so I deleted it. Now I see &lt;code&gt;router!&lt;/code&gt;, though, so I&#39;m even more
inclined to think this is a macro directive. Also, I doubt
the term &#39;directive&#39; is correct, so don&#39;t pick it up.
&lt;/p&gt;

&lt;p&gt;
Lets try it:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
cargo run
    Updating git repository `https://github.com/nickel-org/nickel.rs.git`
    Updating registry `https://github.com/rust-lang/crates.io-index`
 Downloading unsafe-any v0.4.1
 Downloading httparse v0.1.2
 Downloading traitobject v0.0.3
 Downloading lazy_static v0.1.10
 Downloading pkg-config v0.3.4
 Downloading num_cpus v0.2.5
 Downloading modifier v0.1.0
 Downloading groupable v0.2.0
 Downloading unicase v0.1.0
 Downloading gcc v0.3.5
 Downloading time v0.1.25
 Downloading log v0.3.1
 Downloading url v0.2.34
 Downloading plugin v0.2.6
 Downloading hyper v0.4.0
 Downloading matches v0.1.2
 Downloading mustache v0.6.1
 Downloading bitflags v0.1.1
 Downloading typeable v0.1.1
 Downloading openssl v0.6.2
 Downloading rustc-serialize v0.3.14
 Downloading typemap v0.3.2
 Downloading regex v0.1.30
 Downloading cookie v0.1.20
 Downloading mime v0.0.11
 Downloading libc v0.1.8
 Downloading openssl-sys v0.6.2
   Compiling modifier v0.1.0
   Compiling traitobject v0.0.3
   Compiling regex v0.1.30
   Compiling libc v0.1.8
   Compiling lazy_static v0.1.10
   Compiling matches v0.1.2
   Compiling httparse v0.1.2
   Compiling rustc-serialize v0.3.14
   Compiling groupable v0.2.0
   Compiling pkg-config v0.3.4
   Compiling gcc v0.3.5
   Compiling bitflags v0.1.1
   Compiling unicase v0.1.0
   Compiling typeable v0.1.1
   Compiling unsafe-any v0.4.1
   Compiling log v0.3.1
   Compiling num_cpus v0.2.5
   Compiling typemap v0.3.2
   Compiling mime v0.0.11
   Compiling plugin v0.2.6
   Compiling openssl-sys v0.6.2
   Compiling time v0.1.25
   Compiling openssl v0.6.2
   Compiling url v0.2.34
   Compiling mustache v0.6.1
   Compiling cookie v0.1.20
   Compiling hyper v0.4.0
   Compiling nickel v0.5.0 (https://github.com/nickel-org/nickel.rs.git#69546f58)
   Compiling simple-log v0.1.0 (file:///Users/joel/Projects/simple-log)
     Running `target/debug/simple-log`
Listening on http://127.0.0.1:6767
Ctrl-C to shutdown server
^C
&lt;/pre&gt;

&lt;p&gt;
Woo hoo! Visiting &lt;code&gt;localhost:6767&lt;/code&gt; in my browser worked.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-4-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.4&lt;/span&gt; One Final Challenge&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-4&quot;&gt;
&lt;p&gt;
Ok, now I want to try one thing and then call it a night: can I move
the &quot;hello world&quot; into its own function? Baby steps, after all.
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
fn say_hello() {
    &quot;Hello dear world!&quot;;
}

fn main() {
    let mut server = Nickel::new();

    server.utilize(router! {
        get &quot;**&quot; =&amp;gt; |_req, _res| {
            say_hello();
        }
    });

    server.listen(&quot;127.0.0.1:6767&quot;);
}
&lt;/pre&gt;

&lt;p&gt;
Err&amp;#x2026; when I run it this time, I see &quot;Not found&quot;. Let me try
fiddling with semicolons just in case that&#39;s important:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
fn say_hello() {
    &quot;Hello dear world!&quot;
}

fn main() {
    let mut server = Nickel::new();

    server.utilize(router! {
        get &quot;**&quot; =&amp;gt; |_req, _res| {
            say_hello()
        }
    });

    server.listen(&quot;127.0.0.1:6767&quot;);
}
&lt;/pre&gt;

&lt;p&gt;
Ok&amp;#x2026; now I have a completely different error message:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
$ cargo run
   Compiling simple-log v0.1.0 (file:///Users/joel/Projects/simple-log)
src/main.rs:6:5: 6:24 error: mismatched types:
 expected `()`,
    found `&amp;amp;&#39;static str`
(expected (),
    found &amp;amp;-ptr) [E0308]
src/main.rs:6     &quot;Hello dear world!&quot;
                  ^~~~~~~~~~~~~~~~~~~
error: aborting due to previous error
Could not compile `simple-log`.

To learn more, run the command again with --verbose.
&lt;/pre&gt;


&lt;p&gt;
So, I &lt;i&gt;guess&lt;/i&gt; the presence/absence of the semicolon was important. And
now I&#39;m getting a type error, at least. Oh, and I&#39;m 90% sure that &lt;code&gt;()&lt;/code&gt;
is referring to what I remember to be &#39;unit&#39;, the Rust idea of
undefined, nil, or whatever. I&#39;m sure this isn&#39;t quite right, but I
guess it makes sense.
&lt;/p&gt;

&lt;p&gt;
I &lt;i&gt;assumed&lt;/i&gt; Rust would do type inferencing. Does it not? Or does it
just not do it around function boundaries? Hmm.
&lt;/p&gt;

&lt;p&gt;
So, the error message is telling me that it expected the return value
to be unit, but the actual return value was a static string(?). I&#39;m
pretty sure I&#39;ve seen the syntax for specifying return value types;
let me see:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
#[macro_use] extern crate nickel;

use nickel::Nickel;

fn say_hello() -&amp;gt; &amp;amp;&#39;static str {
    &quot;Hello dear world!&quot;
}

fn main() {
    let mut server = Nickel::new();

    server.utilize(router! {
        get &quot;**&quot; =&amp;gt; |_req, _res| {
            say_hello()
        }
    });

    server.listen(&quot;127.0.0.1:6767&quot;);
}
&lt;/pre&gt;

&lt;p&gt;
The type &lt;code&gt;&amp;amp;&#39;static str&lt;/code&gt; looks very weird to me. Does it compile? Does
it work?
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
$ cargo run &amp;amp;
[1] 14997
Running `target/debug/simple-log`
Listening on http://127.0.0.1:6767
Ctrl-C to shutdown server
$ curl http://localhost:6767
Hello dear world!
$ fg
cargo run
^C
&lt;/pre&gt;


&lt;p&gt;
Yay, it worked! This time around, Rust hasn&#39;t been &lt;i&gt;that&lt;/i&gt; frustrating. I&#39;m not
sure if its because I&#39;m more familiar with some of this tooling, or
I&#39;ve opted to read documentation more, but I&#39;m having fun. Also, the
difference between &lt;i&gt;reading&lt;/i&gt; a language and &lt;i&gt;writing&lt;/i&gt; in a
language sometimes very surprising. While I understand these code
examples, I can&#39;t make edits quickly and effectively.
&lt;/p&gt;

&lt;p&gt;
&amp;#x2014;
&lt;/p&gt;

&lt;p&gt;
Next up, we will work through the process of writing the current date
to a file.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class=&quot;footpara&quot;&gt;
I&#39;m not trying to say that the experiences of
beginners is not valuable &amp;#x2013; far from it! However, I do think those
experiences bring a separate set of insights than those from someone
who has been programming for a long time, and they may notice how
non-standard some things in an ecosystem are.
&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.2&quot; name=&quot;fn.2&quot; class=&quot;footnum&quot; href=&quot;#fnr.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;p class=&quot;footpara&quot;&gt;
I would normally say
&#39;compile-time&#39; directive, but that doesn&#39;t make much sense since Rust
is a compiled language. So, I say &#39;macro-time&#39; directive, but I really
have no idea.
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sun, 24 May 2015 00:00:00 -0400</pubDate>
        <link>http://joelmccracken.github.io//entries/a-simple-web-app-in-rust-pt-1/</link>
        <guid isPermaLink="true">http://joelmccracken.github.io//entries/a-simple-web-app-in-rust-pt-1/</guid>
      </item>
    
      <item>
        <title>A Mid-Course Review of &quot;From NAND to Tetris&quot; on Coursera</title>
        <description>&lt;p&gt;
I&#39;ve been taking the course &quot;From NAND to Tetris&quot; on Coursera. So far,
the course has been very interesting, and I recommend it. It provides
a good taste of how computers work from a low level, starting at the
most basic logic gates and building up from there. I&#39;m over half way
through, and have some observations.
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;This course has been a blast! Slowly building up a computer from
first principles has been very rewarding. Its an amazing
feeling to struggle with designing a chip and then to turn around
and use it in another, more advanced chip!
&lt;/li&gt;

&lt;li&gt;The course hasn&#39;t been that hard. Now, I had some classes that
dealt with this kind of thing at Pitt. I remember working with
most of these concepts in the past, so this is not totally foreign
to me. However, I also think that the professors did an excellent
job simplify things to their essential concepts.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
I&#39;m really glad I have invested my time into this course. If you want
to learn more about how computers work on a low level (or even if you
would like a refresher into the topic), I highly recommend it.
&lt;/p&gt;
</description>
        <pubDate>Sat, 16 May 2015 00:00:00 -0400</pubDate>
        <link>http://joelmccracken.github.io//entries/a-mid-course-review-of-from-nand-to-tetris/</link>
        <guid isPermaLink="true">http://joelmccracken.github.io//entries/a-mid-course-review-of-from-nand-to-tetris/</guid>
      </item>
    
      <item>
        <title>Scope Creep, or, the Decline and Fall of My Personal Projects</title>
        <description>&lt;p&gt;
Scope creep can kill any project. There&#39;s no doubt about
that. However, it surprises me just how often this problem
manifests itself in my personal projects &amp;#x2013; that is, whatever I am
hacking on at the moment. I wonder what causes the
problem?
&lt;/p&gt;

&lt;p&gt;
It is easy to give in to the urge to slowly add more features to
projects. Its so easy to say &quot;Oh! one more thing!&quot;, especially when you
are your own boss, and there isn&#39;t necessarily anything that &lt;i&gt;needs&lt;/i&gt;
to be delivered &amp;#x2013; There isn&#39;t necessarily an end goal, or singular,
driving purpose. 
&lt;/p&gt;

&lt;p&gt;
You&#39;d think it would be easier to have a fixed scope on my own
projects. After all, I am the one who defines the scope. I&#39;m also
familiar with the problems of scope creep. As a general principle,
I think it is probably true that its easier to control the scope on
something you define (because &lt;i&gt;I&lt;/i&gt; control and define it, after
all). However, I let my 
wandering curiosity influence the direction of the projects I work on.
This creates an ever-shifting set of goals that leaves a wake of
half-done things behind. This makes sense, because my satisfying my
curiosity brings me great pleasure &amp;amp; makes up a huge part of who I am.
&lt;/p&gt;

&lt;p&gt;
The problem, though, is
that the spark of understanding comes, not at the &lt;i&gt;end&lt;/i&gt; of a project or
investigation, but at the beginning of the project when things are
still in a formative state. But once that understanding comes, it
&lt;i&gt;moves&lt;/i&gt;, ever forward.
&lt;/p&gt;

&lt;p&gt;
Another aspect to this is that most of my personal projects do not
have an explicit goal I&#39;m trying to achieve. I start with &lt;i&gt;some&lt;/i&gt; idea of what
I want to do, but the project is defined ad hoc as I work through
it. This is &lt;i&gt;fun&lt;/i&gt;, but I think it is less effective than having a
specific, finite goal in mind (at least effective for producing useful
artifacts). 
&lt;/p&gt;

&lt;p&gt;
I&#39;m going to go one step further. There&#39;s another pattern I&#39;ve
noticed, and this one is a bit less self-indulgent: when something
gets too confusing and I get frustrated, I tend to drop the
project. I&#39;m probably less worried about this, because normally I
change gears and work on something that would fill in my knowledge
gaps, hopefully removing those frustrations. 
&lt;/p&gt;

&lt;p&gt;
I guess it ultimately depends upon what I&#39;m trying to do. Am I trying
to produce things on topics I love, or am I just trying to learn? If
I&#39;m trying to learn, is this the best way to do it? Am I just fooling
myself, getting exciting about projects and then dropping them?
&lt;/p&gt;

&lt;p&gt;
&amp;#x2014;
&lt;/p&gt;

&lt;p&gt;
I recently started working on SICP again, and it got me thinking about
this problem. Initially, my goal was something like: read the book,
work through the exercises, and put the results on GitHub.
&quot;Oh,&quot; I thought, &quot;the code should really have unit
tests written to show that it works. I&#39;ve been wanting to play with
RackUnit anyway&quot;. A few exercises later, I thought, &quot;I should really look into
Scribble for documenting the code I am working on. I could use Plot to
create charts in the Scribble docs, and show interactive examples of
how it all works through the Literate-like facilities in Scribble&quot;.
&lt;/p&gt;

&lt;p&gt;
To be honest, this project definition has grown into something
extremely interesting. I just wish it wasn&#39;t &lt;i&gt;so much work&lt;/i&gt;, a little more
finite, and easier to make progress on. As it stands, this is really a
huge task. I started writing this post because I wanted to debug my
brain, sorting out the threads that compose this phenomenon.
&lt;/p&gt;


&lt;p&gt;
&amp;#x2014;
&lt;/p&gt;

&lt;p&gt;
What lessons can I learn? I think I need to be more careful to think
through my project goals, and learn to recognize when I&#39;m changing
them &amp;#x2013; and before changing them, decide if the change is worth the
effort. 
&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://joelmccracken.github.io//entries/scope-creep/</link>
        <guid isPermaLink="true">http://joelmccracken.github.io//entries/scope-creep/</guid>
      </item>
    
      <item>
        <title>Context</title>
        <description>&lt;p&gt;
I believe &lt;i&gt;context&lt;/i&gt; as a concept is one of the most under-appreciated
ideas in programming. When it is not appreciated and planned for,
context can leak into areas of code that it shouldn&#39;t.
&lt;/p&gt;

&lt;p&gt;
In the &quot;Data, Context, and Interaction&quot; (&lt;i&gt;DCI&lt;/i&gt;) model, context takes a
central role. The intuition is that code and ideas may be correct in a
certain context while being confusing and unclear in another.
&lt;/p&gt;

&lt;p&gt;
We have an intuitive grasp of what context is. If we talk about a
small piece of code, context might refer to code from the same
package, class, or module. Or, it
might refer to the code&#39;s usage &amp;#x2013; the context from which it is
invoked.
I think this is the most subtle form of coupling due to context that may arise.
&lt;/p&gt;

&lt;p&gt;
Occasionally, I encounter code that looks a little strange.
Typically, I&#39;ll then do a search of the code base, trying to find
where that code is called from. Normally, I&#39;m able to understand what
confused me: some oddity in the caller prompted the author to change
the code-in-question, adding some behavior specific to that caller.
&lt;/p&gt;


&lt;p&gt;
What problems does context leaking cause?
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;It hampers reuse. I&#39;m less likely to find code useful that has
strange pieces that were specific to some other story from a year
ago. Often, the behavior
&lt;/li&gt;

&lt;li&gt;It makes the code more complicated. As I hinted at above, this kind
of thing almost always makes the called code look &lt;i&gt;bizarre&lt;/i&gt;. The
only way to make sense of it being to look up and understand
the context of another caller.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
What can be done?
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Limit context-specific code to &lt;i&gt;that context&lt;/i&gt;. For example, don&#39;t add logic
specific to CSV importing to your core models. If you identify
something that is &lt;i&gt;essential&lt;/i&gt; to the model, sure, add it.
&lt;/li&gt;

&lt;li&gt;Break your application into modules. When all the concepts in your
application are blended together, it can be really hard to identify
kind of context leakage.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Failure to recognize context and conceptual boundaries will make your
code worse. Throughout my career, it&#39;s something I&#39;ve seen over, and
over, and over again.
&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://joelmccracken.github.io//entries/context/</link>
        <guid isPermaLink="true">http://joelmccracken.github.io//entries/context/</guid>
      </item>
    
      <item>
        <title>Backup Your Data, Kids</title>
        <description>&lt;p&gt;
Last weekend, I deleted a directory that was &quot;empty&quot; that included
some of my personal data.
&lt;/p&gt;

&lt;p&gt;
I use empty with scare quotes because the directory wasn&#39;t actually
empty. I don&#39;t know what exactly caused it, but OS X was listing the
directory as empty. I was trying to figure out what was going on with
something else, noticed the directory, thought it was some junk
directory I never actually used, deleted it, and then a few minutes
later that a &lt;i&gt;number&lt;/i&gt; of directories were mysteriously empty. I
restarted computer and they all came back.
&lt;/p&gt;

&lt;p&gt;
I didn&#39;t lose that much data because I do keep most things in
git. However, there were a few projects that I had been working on
recently that I hadn&#39;t pushed remotely.
&lt;/p&gt;

&lt;p&gt;
My personal lesson is to not have things that I want to keep not
backed up, no matter how short a time it will be. I know, I know, this
is obvious, common advice, but still.
&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Feb 2015 00:00:00 -0500</pubDate>
        <link>http://joelmccracken.github.io//entries/backup-your-data-kids/</link>
        <guid isPermaLink="true">http://joelmccracken.github.io//entries/backup-your-data-kids/</guid>
      </item>
    
      <item>
        <title>Wish for a New Programming Language</title>
        <description>&lt;p&gt;
There is a principle in program design: defer decisions to the last
possible moment, because this is when you will have the most
information about how to make the right choice.
&lt;/p&gt;

&lt;p&gt;
If I were to design a new programming language today, I would apply
this to a programming language environment. It would look something
like this:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;A runtime that is small &amp;#x2013; optional, ideally &amp;#x2013; but can grow and be
configured, incorporating ideas from different communities.
&lt;/li&gt;

&lt;li&gt;A language that is equally small, but growable. This means Lisp,
but I include it from the standpoint of being a reasonable place to
start. Include facilities to extend the actual textual syntax of
the language, not just manipulating sexps.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
One of the more frustrating aspects of programming languages is that
they make tradeoffs up front. The design decisions are made at the
earliest possible moment. These decisions often are as permanent as
the languages themselves are, which is a shame. Programming is a
constantly growing, dynamic field. We will never know less about it
than we know now.
&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Jan 2015 00:00:00 -0500</pubDate>
        <link>http://joelmccracken.github.io//entries/wish-for-a-new-programming-language/</link>
        <guid isPermaLink="true">http://joelmccracken.github.io//entries/wish-for-a-new-programming-language/</guid>
      </item>
    
      <item>
        <title>I should&#39;a scripted it.</title>
        <description>&lt;p&gt;
I was just working on SICP exercise 1.14 and had an interesting
experience.
&lt;/p&gt;

&lt;p&gt;
The exercise is pretty simple. Draw a tree-graph of the
execution of the ways-to-make-change-counting algorithm from earlier
in the chapter. There is a similar graph of the execution of the
Fibonacci function, so the pieces were all there.
&lt;/p&gt;

&lt;p&gt;
Instead of drawing on paper, I thought, why not create the graph
using a program? That would
certainly make the exercise more interesting.
I&#39;ve been wanting to do something interesting with graphviz, and
drawing the execution tree seemed to be the perfect thing.
&lt;/p&gt;

&lt;p&gt;
I looked at this &lt;a href=&quot;http://www.graphviz.org/pdf/dotguide.pdf&quot;&gt;graphviz tutorial&lt;/a&gt; (warning; PDF) and I
learned how to construct the graph how I wanted pretty quickly. I
spent some time on it, and it worked out well.
&lt;/p&gt;

&lt;p&gt;
Now, if you notice, the SICP exercise specifies drawing the tree for
counting the ways to change 11 cents. In my mind, this seemed like it
should be pretty easy to do &amp;#x2013; it is a very small number, after
all.
&lt;/p&gt;

&lt;p&gt;
In actuality, creating this structure was a huge pain.
Editing the nodes, doing calculations, and keeping things in order
ended up taking much longer and was harder than I expectd.
I made mistakes and got confused. Harumph!
&lt;/p&gt;

&lt;p&gt;
I wondered, can I somehow &lt;i&gt;script&lt;/i&gt; the creation of this file? Do I
actually need to do this manually? I mean, all I would need to do is
write some strings out to a file&amp;#x2026; it shouldn&#39;t be &lt;i&gt;that&lt;/i&gt; hard.
&lt;/p&gt;

&lt;p&gt;
So, I sprinkled some logging-style statements in the code that the
book provides as the definition of the change counting algorithm.
About half an hour later, I had a working, complete graph. Awesome.
&lt;/p&gt;

&lt;p&gt;
Here&#39;s the complete code:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-racket&quot;&gt;#lang racket

(define (gen-count-change-graph)

  (define output-filename &quot;ex1-14.dot&quot;)
  (when (file-exists? output-filename)
      (delete-file output-filename))
  (define output (open-output-file output-filename))
  (define counter 0)
  (define (++counter)
    (let ([ncounter (add1 counter)])
      (set! counter ncounter)
      ncounter))

  (define (record-cc amount kinds-of-coins my-id)
    (fprintf output
	     &quot;\texec~s [label=\&quot;&amp;lt;f0&amp;gt;cc|&amp;lt;f1&amp;gt;~s|&amp;lt;f2&amp;gt;~s\&quot;];\n&quot;
	     my-id amount kinds-of-coins))

  (define (record-1 id parent-id)
    (fprintf output &quot;\toneval~s [label=\&quot;1\&quot;];\n&quot; id)
    (fprintf output &quot;\texec~s -&amp;gt; oneval~s;\n&quot; parent-id id))


  (define (record-0 id parent-id)
    (fprintf output &quot;\tzedval~s [label=\&quot;0\&quot;];\n&quot; id)
    (fprintf output &quot;\texec~s -&amp;gt; zedval~s;\n&quot; parent-id id))

  (define (record-branching left-child-id right-child-id parent-id)
    (fprintf output
	     &quot;\texec~s -&amp;gt; {exec~s; exec~s}\n&quot;
	     parent-id
	     left-child-id
	     right-child-id))

  (define (count-change amount)
    (cc amount 5 counter))

  (define (cc amount kinds-of-coins my-id)
    (record-cc amount kinds-of-coins my-id)
    (let ([left-child-id (++counter)]
	  [right-child-id (++counter)])
      (cond ((= amount 0)
	     (begin
	       (record-1 left-child-id my-id)
	       1))
	    ((or (&amp;lt; amount 0) (= kinds-of-coins 0))
	     (begin
	       (record-0 left-child-id my-id)
	       0))
	     (else (begin
		     (record-branching left-child-id right-child-id my-id)
		     (+ (cc amount
			  (- kinds-of-coins 1)
			  left-child-id)
		      (cc (- amount
			     (first-denomination kinds-of-coins))
			  kinds-of-coins
			  right-child-id)))))))


  (define (first-denomination kinds-of-coins)
    (cond ((= kinds-of-coins 1) 1)
	  ((= kinds-of-coins 2) 5)
	  ((= kinds-of-coins 3) 10)
	  ((= kinds-of-coins 4) 25)
	  ((= kinds-of-coins 5) 50)))

  (display &quot;digraph execution_tree {
node [shape=record];
&quot; output)

  (count-change 11)
  (display &quot; } &quot; output)
  (close-output-port output))

(gen-count-change-graph)
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
There were a few interesting facets to this experience:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;The execution graph to count the ways to change 11 cents is
surprisingly large.
&lt;/li&gt;

&lt;li&gt;The interesting thing is that scripting this solution took
&lt;b&gt;significantly&lt;/b&gt; less time than creating it manually. I probably
spent a few hours of working on this before I ended up starting to
script it, and I was only about half done.
&lt;/li&gt;

&lt;li&gt;However, if I hadn&#39;t done it manually for so long, I&#39;m not sure I
would have been able to understand so readily how to generate the
graph &amp;amp; what the dot syntax would be like. For that matter, the
graph I had created manually gave me something to spot-check the
generated graph against. So, I&#39;m not really sure I &lt;i&gt;actually&lt;/i&gt; wasted
time doing it manually.
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
I&#39;ve heard people say that they might enjoy some movies, but feel
inspired by others. This book really inspires me, which is why I think
I love it so much. The problems are interesting enough that to
&quot;sink my teeth into&quot; them is rewarding in many ways.
&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://joelmccracken.github.io//entries/i-shoulda-scripted-it/</link>
        <guid isPermaLink="true">http://joelmccracken.github.io//entries/i-shoulda-scripted-it/</guid>
      </item>
    
      <item>
        <title>Objects Are Like Programs</title>
        <description>&lt;p&gt;
Something that has been on my mind for a long time is how similar
objects are to programs, especially Unix programs.
I&#39;m &lt;a href=&quot;http://blog.codeclimate.com/blog/2012/11/28/your-objects-the-unix-way/&quot;&gt;not the first&lt;/a&gt; to notice this similarity, but the similarities are
so numerous I find it striking.
Here are a bunch of interesting things, in no particular order:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Executables are like classes. They both contain the code necessary
to create new instances: for an executable, that would be a running
program. For a class, that would be an instance.
&lt;/li&gt;

&lt;li&gt;Programs are best when they are small, focused, and do one thing
well. Similarly, objects are best when they are small and
focused. Is your class more like &lt;i&gt;Microsoft Word&lt;/i&gt;, or &lt;code&gt;cat&lt;/code&gt;?
&lt;/li&gt;

&lt;li&gt;Program reuse comes from this small focus. The same is true of
objects.
&lt;/li&gt;

&lt;li&gt;Processes conceptually have a lifecycle. They&#39;re &quot;garbage-collected&quot;
by the operating system when they finish executing, just like
objects.
&lt;/li&gt;

&lt;li&gt;Processes are a combination of code and data, just like
objects. Processes are independent of each other in a similar way to
how instance data is independent between instances.
&lt;/li&gt;

&lt;li&gt;There are many ways processes can interact with one another, but the
simplest seem very similar to the way objects should interact: via
sockets. Socket communication is essentially the same as message
passing between objects.
&lt;/li&gt;

&lt;li&gt;Long-lived objects seem awfully similar to server processes.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
In the oo-vs-functional debate, I&#39;m somewhere in the middle. I &lt;i&gt;love&lt;/i&gt;
functional programming &amp;#x2013; I just don&#39;t think it is somehow &quot;more
important&quot; than object oriented programming, or that OO is
misguided. Objects are just too general in concept and powerful in
modeling ability. They even model functions rather well, and thus they
can be used rather well for functional programming (when the syntax
allows it; see Ruby).
&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://joelmccracken.github.io//entries/objects-are-like-programs/</link>
        <guid isPermaLink="true">http://joelmccracken.github.io//entries/objects-are-like-programs/</guid>
      </item>
    
      <item>
        <title>SICP &amp; Getting the Size of the Current &quot;Stack&quot; in Racket</title>
        <description>&lt;p&gt;
I&#39;ve been working through &lt;i&gt;SICP&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/i&gt; again. Its really a great book &amp;#x2013;
and I need to say more about it on here sometime.
&lt;/p&gt;

&lt;p&gt;
I am currently on Exercise 1.11, which centers around writing two
separate functions that both compute a mathematical function. The
first function should compute in
a &lt;i&gt;recursive&lt;/i&gt; way and the second should compute in a
&lt;i&gt;iterative&lt;/i&gt; way.
&lt;/p&gt;

&lt;p&gt;
The point of writing the function in these different ways is to
highlight the fact that iterative formulations are fast and take
up significantly less memory; in fact, they can be computed
in place/in constant space.
&lt;/p&gt;

&lt;p&gt;
While I was wrote these, it hit me: It&#39;s interesting to create these
functions, but it would be even more interesting to show that the
computations take up the amount of space we have predicted. So, I set
out to see if I could
figure out how to get current size of the stack, and then to watch the
stack change during the course of both executions.
&lt;/p&gt;

&lt;p&gt;
As it turns out, it doesn&#39;t seem like Racket has the direct concept of
a stack. This doesn&#39;t surprise me, because I understand that the
concept of a stack is a little bit less clear-cut in languages that
support continuations &amp;amp; tail call optimization.
&lt;/p&gt;

&lt;p&gt;
However, I was able to find a method &lt;a href=&quot;http://docs.racket-lang.org/reference/runtime.html#(def._((quote._~23~25kernel)._vector-set-performance-stats!))&quot;&gt;&lt;code&gt;vector-set-performance-stats!&lt;/code&gt;&lt;/a&gt;
that will provide &quot;the number of bytes currently in use for the
thread&#39;s continuation&quot;. Since a continuation represents the remaining
work that a thread needs to perform as part of its computation, it
seems like this would map fairly directly to the idea of the stack
size showing how each function grows in space during the
computation. If the recursive continuation size
continually grows, and the iterative continuation size stays
constant, that would be strong evidence that this would be answering
my question.
&lt;/p&gt;

&lt;p&gt;
Measurements of the stack size performed as predicted. During the
course of the execution, the recursive continuation size kept
growing. Surprisingly, the iterative version kept &lt;b&gt;precisely the
same&lt;/b&gt;. I wasn&#39;t certain at the time that this would be the case, but
to me, this clearly is a success.
&lt;/p&gt;

&lt;p&gt;
Ok, so how we measure the size of the continuation? The function  &lt;code&gt;get-continuation-size&lt;/code&gt;
below finds the information for us.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(define (get-continuation-size)
  (let ((results (make-vector 20)))
    (vector-set-performance-stats! results (current-thread))
    ;; item 3 contains continuation size
    (vector-ref results 3)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
I&#39;m going to keep using this code to show exactly the same thing &amp;#x2013;
that functions are executing within the space we expect them to.
&lt;/p&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class=&quot;footpara&quot;&gt;
: &lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book.html&quot;&gt;http://mitpress.mit.edu/sicp/full-text/book/book.html&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 06 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://joelmccracken.github.io//entries/get-current-stack-size-in-racket/</link>
        <guid isPermaLink="true">http://joelmccracken.github.io//entries/get-current-stack-size-in-racket/</guid>
      </item>
    
      <item>
        <title>Automated Workstation Setup &amp; Management</title>
        <description>&lt;p&gt;
Over the years, I have written lots of scripts to help automate
something or other. Many of these have broken. Example of the scripts
that have broken include a
LastPass data exporter and encrypter in Ruby, Emacs Lisp of various
kinds that integrate Emacs with other
processes, a tiny script to toggle my Heroku authentication between
my personal and work accounts, and others. Typically, I find
this out about their brokenness at the worst possible time &amp;#x2013; when I
need to actually use the scripts I rely upon.
&lt;/p&gt;

&lt;p&gt;
This has become common enough that I have grown to expect it. Lots of
things might cause one of these scripts to break: software upgrades,
making incompatible changes to other pieces of code, accidentally
removing something that the script relied upon have all played a part
in things breaking.
&lt;/p&gt;

&lt;p&gt;
I really hate this. Taking the time to write something, only to have
it be broken when you need it, makes you feel like you wasted your
time writing the scripts in the first place. Because of this
phenomenon, I tend to write fewer scripts and be more accepting of
discomfort.
&lt;/p&gt;

&lt;p&gt;
I really hate this, too. I believe we &lt;i&gt;should&lt;/i&gt; script things. I believe
this is a &lt;i&gt;key&lt;/i&gt; to being a productive programmer, and is one way that
allows us to multiply out abilities as programmers.
And, I&#39;m not alone in
thinking this way. It seems that all the best developers think the
same thing: laziness is a virtue. Script away the things you would
otherwise have to do manually.
&lt;/p&gt;

&lt;p&gt;
I&#39;ve come to believe that an automated setup &amp;amp; configuration
management system is the key for me to solve these problems. If I could
safely reproduce the environment wherein my software works, and I
had tests around the software, then I could write scripts more
effectively and with greater freedom. I would be able to get back some
of the effectiveness I am missing out on.
&lt;/p&gt;

&lt;p&gt;
Over the past year or so I have been making a concerted effort to
solve this problem. Some things have worked out really well, others
have not. At some point, the software to build this site was broken,
and I didn&#39;t know why, and out of frustration I stopped writing and
focused intensely on setting things up correctly from first
principles. I&#39;m nowhere near done, but it is time to start talking
about what I have discovered.
&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Nov 2014 00:00:00 -0500</pubDate>
        <link>http://joelmccracken.github.io//entries/automated-workstation-setup-and-management/</link>
        <guid isPermaLink="true">http://joelmccracken.github.io//entries/automated-workstation-setup-and-management/</guid>
      </item>
    
  </channel>
</rss>
